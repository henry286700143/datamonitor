package com.viewstar.jsdatamonitor.util;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;



public class DataExportUtil {
	
	/**
	 * ï¿½Ä¼ï¿½ï¿½ï¿½×ºï¿½ï¿½(csv)ï¿½ï¿½".csv"
	 */
	public static final String FILE_SUFIXX_NAME_CSV = ".csv";
	
	/**
	 * ï¿½Ä¼ï¿½ï¿½ï¿½×ºï¿½ï¿½(excel)ï¿½ï¿½".xlsx"
	 */
	public static final String FILE_SUFIXX_NAME_EXCEL = ".xlsx";
	
	/**
	 * ï¿½Ø³ï¿½ï¿½ï¿½ï¿½ï¿½"\r"
	 */
	public static final int SYMBOL_CR = 13;
	
	/**
	 * ï¿½ï¿½ï¿½Ð·ï¿½ï¿½ï¿½"\n"
	 */
	public static final int SYMBOL_LF = 10;
	
	/**
	 * ï¿½ï¿½ï¿½Å£ï¿½","
	 */
	public static final int SYMBOL_COMMA = 44;
	
	/**
	 * Ë«ï¿½ï¿½ï¿½Å£ï¿½"\""
	 */
	public static final int SYMBOL_DOUBLE_QUOTE = 34;
	
	/**
	 * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä¼ï¿½
	 * headerMapï¿½ï¿½Í·ï¿½ï¿½KeyÓ¦ï¿½ï¿½dataListï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½KeyÒ»ï¿½Â²ï¿½ï¿½ï¿½È¡ï¿½ï¿½ï¿½ï¿½Ó¦ï¿½Ðµï¿½ï¿½ï¿½ï¿½ï¿½
	 * ï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½Ä¬ï¿½ï¿½ÎªGBK
	 * 
	 * @param fileDir ï¿½Ä¼ï¿½ï¿½ï¿½ï¿½ï¿½Ä¿Â¼ 
	 * @param displayname ï¿½Ä¼ï¿½ï¿½ï¿½
	 * @param dataList ï¿½ï¿½ï¿½ï¿½ï¿½Ð±ï¿½
	 * @param headerMap ï¿½ï¿½Í·ï¿½ï¿½Ê¶
	 * @param fileType ï¿½Ä¼ï¿½ï¿½ï¿½ï¿½ï¿½ 0-CSV;1-EXCEL;
	 * @throws Exception
	 */
	public static String exportData(String fileDir, String displayname, List<Map<String, Object>> dataList,
			LinkedHashMap<String, Object> headerMap, String fileType) throws Exception {
		return exportData(fileDir, displayname, dataList, headerMap, fileType, "GBK");
	}
	
	/**
	 * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä¼ï¿½
	 * headerMapï¿½ï¿½Í·ï¿½ï¿½KeyÓ¦ï¿½ï¿½dataListï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½KeyÒ»ï¿½Â²ï¿½ï¿½ï¿½È¡ï¿½ï¿½ï¿½ï¿½Ó¦ï¿½Ðµï¿½ï¿½ï¿½ï¿½ï¿½
	 * 
	 * @param fileDir ï¿½Ä¼ï¿½ï¿½ï¿½ï¿½ï¿½Ä¿Â¼ 
	 * @param displayname ï¿½Ä¼ï¿½ï¿½ï¿½
	 * @param dataList ï¿½ï¿½ï¿½ï¿½ï¿½Ð±ï¿½
	 * @param headerMap ï¿½ï¿½Í·ï¿½ï¿½Ê¶
	 * @param fileType ï¿½Ä¼ï¿½ï¿½ï¿½ï¿½ï¿½ 0-CSV;1-EXCEL;
	 * @param csvCharsetName CSVï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½
	 * @return ï¿½Ä¼ï¿½ï¿½ï¿½ï¿½ï¿½Â·ï¿½ï¿½
	 * @throws IOException 
	 * @throws Exception
	 */
	public static String exportData(String fileDir, String displayname, List<Map<String, Object>> dataList,
			LinkedHashMap<String, Object> headerMap, String fileType, String csvCharsetName) throws IOException {

		File directory = new File(fileDir);
		if (!directory.exists()) {
			directory.mkdirs();
		}
		File file = null;
		BufferedOutputStream bufferedOutputStream = null;
		try {
			
			// CSVï¿½Ä¼ï¿½
			if ("0".equals(fileType)) {
				
				// ï¿½ï¿½ï¿½ï¿½ï¿½Ä¼ï¿½ï¿½ï¿½
				String filenamedisplay = new StringBuilder(displayname).append(FILE_SUFIXX_NAME_CSV).toString();
				
				file = new File(fileDir, filenamedisplay);
				
				bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(file));
				
				// ï¿½ï¿½ï¿½ï¿½ï¿½Ä¼ï¿½
				generateCsv(bufferedOutputStream, dataList, headerMap, csvCharsetName);
				
			// EXCELï¿½Ä¼ï¿½
			} else if ("1".equals(fileType)) {
				
				// ï¿½ï¿½ï¿½ï¿½ï¿½Ä¼ï¿½ï¿½ï¿½
				String filenamedisplay = new StringBuilder(displayname).append(FILE_SUFIXX_NAME_EXCEL).toString();

				file = new File(fileDir, filenamedisplay);
				
				bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(file));
				
				// ï¿½ï¿½ï¿½ï¿½ï¿½Ä¼ï¿½
				generateExcel(bufferedOutputStream, dataList, headerMap);
				
			} else {
				throw new IllegalArgumentException("ï¿½ï¿½ï¿½ï¿½Ê¶ï¿½ï¿½ï¿½ï¿½Ä¼ï¿½ï¿½ï¿½ï¿½Í£ï¿?" + String.valueOf(fileType) + "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ñ¡ï¿½ï¿½0-CSV;1-EXCEL;");
			}
			
			return file.getAbsolutePath();
		} finally {
			if (bufferedOutputStream != null) {
				bufferedOutputStream.close();
			}
		}
	}
	
	/**
	 * ï¿½ï¿½ï¿½ï¿½CSVï¿½Ä¼ï¿½
	 * headerMapï¿½ï¿½Í·ï¿½ï¿½KeyÓ¦ï¿½ï¿½dataListï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½KeyÒ»ï¿½Â²ï¿½ï¿½ï¿½È¡ï¿½ï¿½ï¿½ï¿½Ó¦ï¿½Ðµï¿½ï¿½ï¿½ï¿½ï¿½
	 * 
	 * @param outputStream ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	 * @param dataList ï¿½ï¿½ï¿½ï¿½ï¿½Ð±ï¿½
	 * @param headerMap ï¿½ï¿½Í·ï¿½ï¿½Ê¶
	 * @param charsetName ï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½
	 * @throws IOException Ð´ï¿½Ä¼ï¿½ï¿½ì³£
	 */
	public static void generateCsv(OutputStream outputStream, List<Map<String, Object>> dataList,
			LinkedHashMap<String, Object> headerMap, String charsetName) throws IOException {
		
		// Ð´CSVï¿½Ä¼ï¿½
		// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Key
		int itemLength = headerMap.size();
		String[] columnKeys = new String[itemLength];
		{
			// Í·ï¿½ï¿½
			int i = 0;
			for (Entry<String, Object> entry : headerMap.entrySet()) {
				
				// Ð´Í·ï¿½ï¿½ï¿½ï¿½
				writeItem(outputStream, i == itemLength - 1, entry.getValue().toString(), charsetName);
				
				// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Key
				columnKeys[i] = entry.getKey();
				i++;
			}
		}
		
		// ï¿½ï¿½ï¿½ï¿½
		for (int i = 0; i < dataList.size(); i++) {
			Map<String, Object> lineData = dataList.get(i);
			for (int j = 0; j < itemLength; j++) {
				// Ð´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
				writeItem(outputStream, j == itemLength - 1, lineData.get(columnKeys[j]) == null ? "" : lineData.get(columnKeys[j]).toString(), charsetName);
			}
		}
	}
	
	/**
	 * ï¿½ï¿½CSVï¿½Ä¼ï¿½ï¿½ï¿½Ð´ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	 * ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½Ê½"itemContent",
	 * ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½Ê½"itemContent"\r\n
	 * 
	 * @param outputStream ï¿½ï¿½ï¿½ï¿½ï¿?
	 * @param itemContent ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	 * @param isLastItem ï¿½Ç·ï¿½Îªï¿½ï¿½ï¿½Ò»ï¿½ï¿?
	 * @throws IOException Ð´ï¿½ï¿½ï¿½ì³£
	 */
	public static void writeItem(OutputStream outputStream, boolean isLastItem, String itemContent, String charsetName) throws IOException {
		
		// Ð´ï¿½ï¿½"\""
		outputStream.write(SYMBOL_DOUBLE_QUOTE);
		
		// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ý´ï¿½ï¿½ï¿?
		if (itemContent != null) {
			
			// Ð´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
			outputStream.write(itemContent.getBytes(charsetName));
		}
		
		// Ð´ï¿½ï¿½"\""
		outputStream.write(SYMBOL_DOUBLE_QUOTE);
		
		// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿?
		if (!isLastItem) {
			
			// Ð´ï¿½ï¿½","
			outputStream.write(SYMBOL_COMMA);
			
			// ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿?
		} else {
			
			// Ð´ï¿½ë»»ï¿½ï¿½
			outputStream.write(SYMBOL_CR);
			outputStream.write(SYMBOL_LF);
		}
	}
	
	/**
	 * ï¿½ï¿½ï¿½ï¿½Excelï¿½Ä¼ï¿½
	 * headerMapï¿½ï¿½Í·ï¿½ï¿½KeyÓ¦ï¿½ï¿½dataListï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½KeyÒ»ï¿½Â²ï¿½ï¿½ï¿½È¡ï¿½ï¿½ï¿½ï¿½Ó¦ï¿½Ðµï¿½ï¿½ï¿½ï¿½ï¿½
	 * 
	 * @param outputStream ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	 * @param dataList ï¿½ï¿½ï¿½ï¿½ï¿½Ð±ï¿½
	 * @param headerMap ï¿½ï¿½Í·ï¿½ï¿½Ê¶
	 * @throws IOException 
	 * @throws Exception
	 */
	public static void generateExcel(OutputStream outputStream, List<Map<String, Object>> dataList,
			LinkedHashMap<String, Object> headerMap) throws IOException {
		
		// ï¿½ï¿½ï¿½ï¿½ï¿½Âµï¿½Excel ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
		Workbook workbook = new XSSFWorkbook();
		Sheet sheet = workbook.createSheet("data");
		
		// Ð´CSVï¿½Ä¼ï¿½
		// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Key
		int itemLength = headerMap.size();
		String[] columnKeys = new String[itemLength];
		{
			Row row = sheet.createRow(0);
			// Í·ï¿½ï¿½
			int i = 0;
			for (Entry<String, Object> entry : headerMap.entrySet()) {
				
				// Ð´Í·ï¿½ï¿½ï¿½ï¿½
				writeItem(row, i, entry.getValue().toString());
				
				// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Key
				columnKeys[i] = entry.getKey();
				i++;
			}
		}
		
		// ï¿½ï¿½ï¿½ï¿½
		for (int i = 0; i < dataList.size(); i++) {
			Row row = sheet.createRow(i + 1);
			
			Map<String, Object> lineData = dataList.get(i);
			for (int j = 0; j < itemLength; j++) {
				
				// Ð´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
				writeItem(row, j, lineData.get(columnKeys[j]) == null ? "" : lineData.get(columnKeys[j]).toString());
			}
		}
		
		workbook.write(outputStream);
	}
	
	/**
	 * ï¿½ï¿½EXCELï¿½Ä¼ï¿½ï¿½ï¿½Ð´ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	 * 
	 * @param row ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	 * @param cellIndex ï¿½ï¿½Ôªï¿½ï¿½ï¿½ï¿½ï¿?
 	 * @param itemContent ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	 */
	public static void writeItem(Row row, int cellIndex, String itemContent) {
		
		Cell cell = row.createCell(cellIndex);
		cell.setCellType(Cell.CELL_TYPE_STRING);
		cell.setCellValue(itemContent);
	}
}
